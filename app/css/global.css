@charset "UTF-8";
/*
Hichem hamdaoui codix authentification project
*/
/* 
    Created on : 3 oct. 2017, 09:49:09
    Author     : hhamdaoui
*/
@font-face {
  font-family: 'robotoregular';
  src: url("../assets/fonts/Roboto-Regular-webfont.eot");
  src: url("../assets/fonts/Roboto-Regular-webfont.eot?#iefix") format("embedded-opentype"), url("../assets/fonts/Roboto-Regular-webfont.woff2") format("woff2"), url("../assets/fonts/Roboto-Regular-webfont.woff") format("woff"), url("../assets/fonts/Roboto-Regular-webfont.ttf") format("truetype"), url("../assets/fonts/Roboto-Regular-webfont.svg#robotoregular") format("svg");
  font-weight: normal;
  font-style: normal; }

@font-face {
  font-family: 'robotobold';
  src: url("../assets/fonts/Roboto-Bold-webfont.eot");
  src: url("../assets/fonts/Roboto-Bold-webfont.eot?#iefix") format("embedded-opentype"), url("../assets/fonts/Roboto-Bold-webfont.woff") format("woff"), url("../assets/fonts/Roboto-Bold-webfont.ttf") format("truetype"), url("../assets/fonts/Roboto-Bold-webfont.svg#robotobold") format("svg");
  font-weight: normal;
  font-style: normal; }

/* clearfix for floats */
/* mixin to reset ul */
/* mixins for font family and font size */
.itable {
  display: table;
  width: 100%;
  margin: 0 auto; }
  .itable .itableRowGrp {
    display: table-row-group; }
  .itable .itableRow {
    display: table-row; }
  .itable .itableCell {
    display: table-cell; }

.iblock {
  display: inline-block; }

/* flex for the win!!!!! */
.flexContainer {
  display: -ms-flexbox;
  display: flex; }
  .flexContainer.wrap {
    -ms-flex-wrap: wrap;
        flex-wrap: wrap; }
  .flexContainer.spaceBetween {
    -ms-flex-pack: justify;
        justify-content: space-between; }

.vAlignMid {
  vertical-align: middle; }

.vAlignTop {
  vertical-align: top; }

.vAlignBot {
  vertical-align: bottom; }

.ifloat {
  float: left; }

.ifloatRight {
  float: right; }

.iNofloat {
  float: none; }

.half-w {
  width: 50%; }

.full-w {
  width: 100%; }

.full-h {
  height: 100%; }

.paddL-10 {
  padding-left: 10px; }

.pos-a {
  position: absolute; }

.pos-r {
  position: relative; }

.pos-s {
  position: fixed !important; }

.clearMargPadd {
  margin: 0;
  padding: 0; }

.clearBtn {
  border: 0;
  background: none; }

.clearBoth {
  clear: both; }

.clearFloat {
  clear: both;
  width: 100%;
  height: 1px; }

.parentClearBoth::after {
  content: '';
  display: block;
  clear: both; }

.overflow-hidden {
  overflow: hidden; }

.text-linethrough {
  text-decoration: line-through; }

/*
Meant to put css which will be used different part of the site/sections
and to override bootstrap element globally
*/
.btn-danger,
.btn-default,
.btn-info,
.btn-primary,
.btn-success,
.btn-warning {
  text-shadow: none;
  box-shadow: none; }

.overlap_imgContainer_centered {
  display: block;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%); }

.noMargin {
  margin: 0 !important; }

.coverP {
  margin-bottom: 0;
  font-size: 1em; }

.resetList {
  list-style: none;
  padding: 0;
  margin: 0; }

.resetBtn {
  -webkit-appearance: initial;
     -moz-appearance: initial;
          appearance: initial;
  padding: 0;
  margin: 0;
  background: none;
  border: 0; }

/*class for text*/
.text-uppercase {
  text-transform: uppercase; }

.text-center {
  text-align: center; }

.inline-block {
  display: inline-block; }

.block {
  display: block; }

.removearrow {
  -webkit-appearance: none;
  -moz-appearance: none;
  -o-appearance: none; }

.removearrow::-ms-expand {
  display: none; }

@font-face {
  font-family: 'robotoregular';
  src: url("../assets/fonts/Roboto-Regular-webfont.eot");
  src: url("../assets/fonts/Roboto-Regular-webfont.eot?#iefix") format("embedded-opentype"), url("../assets/fonts/Roboto-Regular-webfont.woff2") format("woff2"), url("../assets/fonts/Roboto-Regular-webfont.woff") format("woff"), url("../assets/fonts/Roboto-Regular-webfont.ttf") format("truetype"), url("../assets/fonts/Roboto-Regular-webfont.svg#robotoregular") format("svg");
  font-weight: normal;
  font-style: normal; }

@font-face {
  font-family: 'robotobold';
  src: url("../assets/fonts/Roboto-Bold-webfont.eot");
  src: url("../assets/fonts/Roboto-Bold-webfont.eot?#iefix") format("embedded-opentype"), url("../assets/fonts/Roboto-Bold-webfont.woff") format("woff"), url("../assets/fonts/Roboto-Bold-webfont.ttf") format("truetype"), url("../assets/fonts/Roboto-Bold-webfont.svg#robotobold") format("svg");
  font-weight: normal;
  font-style: normal; }

body {
  font-size: 10px;
  font-family: 'robotoregular', sans-serif;
  font-style: normal;
  font-weight: normal; }
  body header {
    background-color: rgba(255, 255, 255, 0.9);
    border-bottom: 1px solid #E8E8E8;
    height: 8rem; }
    @media (max-width: 767px) {
      body header {
        height: 11.5rem; } }
    body header .navbar-fixed-top {
      position: relative; }
    body header .bloc-1-container {
      height: 8rem;
      display: table;
      width: 100%; }
      @media (max-width: 767px) {
        body header .bloc-1-container {
          height: auto;
          margin-top: 1rem; } }
      body header .bloc-1-container .img-container {
        display: table-cell;
        vertical-align: middle; }
        @media (max-width: 767px) {
          body header .bloc-1-container .img-container {
            text-align: center; } }
        body header .bloc-1-container .img-container img {
          width: 31.5rem; }
          @media (max-width: 767px) {
            body header .bloc-1-container .img-container img {
              width: 21rem; } }
    body header .bloc-2-container {
      height: 8rem;
      display: table;
      width: 100%; }
      @media (max-width: 767px) {
        body header .bloc-2-container {
          height: 69px; } }
      body header .bloc-2-container .bloc-wrapper {
        display: table-cell;
        vertical-align: middle; }
        body header .bloc-2-container .bloc-wrapper h1 {
          text-align: center;
          font-size: 25px;
          color: #1197d5;
          max-width: 320px;
          float: right;
          line-height: 1; }
          @media (max-width: 767px) {
            body header .bloc-2-container .bloc-wrapper h1 {
              font-size: 21px;
              float: none;
              max-width: none;
              width: auto; } }
  body main {
    margin-top: 2rem; }
    @media (max-width: 767px) {
      body main .bloc-buttons {
        text-align: center; }
        body main .bloc-buttons.ifloatRight {
          float: none; }
        body main .bloc-buttons .pull-right {
          float: none !important; } }
    @media (max-width: 767px) {
      body main .text-link {
        text-align: center;
        padding-bottom: 2rem; } }
  body h4 {
    color: #1197d5;
    font-size: 2.2rem;
    font-weight: 500;
    line-height: 1;
    margin: 2rem 0 2rem;
    padding: 0;
    text-transform: uppercase; }
  @media (max-width: 767px) {
    body label.col-sm-5.control-label.no-padding-right {
      padding-bottom: 1.5rem; } }

[ng\:cloak] {
  display: none; }

[ng-cloak] {
  display: none; }

[data-ng-cloak] {
  display: none; }

[x-ng-cloak] {
  display: none; }

.ng-cloak {
  display: none; }

.x-ng.ng-cloak {
  display: none; }

ul {
  list-style: none; }

a {
  color: #333;
  transition: opacity ease 0.3s;
  opacity: 1; }
  a.link {
    color: #1197d5; }
  a:hover {
    cursor: pointer;
    opacity: 0.7; }

ul.simple-post-list {
  list-style: none;
  margin: 0;
  padding: 0; }
  ul.simple-post-list .post-image {
    float: left;
    margin-right: 12px; }

.callout-box {
  background-color: #546489;
  color: #fff;
  padding: 10px 20px; }

.body-title {
  border: 1px solid #e3e3e3;
  border-left: 5px solid #234383;
  padding: 0 20px 20px; }

.featured-box {
  border: 1px solid #e3e3e3;
  border-top: 5px solid #234383;
  padding: 0 20px 20px; }

.breadcrumbs {
  position: relative;
  border-bottom: 1px solid #E5E5E5;
  background-color: #F5F5F5; }

.breadcrumb {
  margin-bottom: 0; }

.cart-btn {
  border-radius: 0; }

.navbar {
  border-radius: 0; }

.navbar-collapse {
  border-top: 0;
  box-shadow: none; }

/*form buttons and fields*/
.form-group-addon {
  padding-left: -20px; }

.errorMessage {
  color: red; }

input.ng-invalid.ng-dirty {
  border-color: red; }

.btn {
  transition: all ease-in 0.3s; }
  .btn.btn-transparent {
    border: #1197d5 1px solid;
    opacity: 1; }
    .btn.btn-transparent:hover {
      opacity: 0.7; }

.input-icon {
  position: relative; }
  .input-icon.input-green span i {
    color: green; }
  .input-icon span {
    position: absolute;
    right: 3rem;
    top: 50%;
    transform: translate(50%, -50%);
    display: table;
    vertical-align: top;
    width: 2rem; }
    .input-icon span i {
      display: table-cell;
      vertical-align: middle;
      color: #1197d5;
      font-size: 1.6rem;
      text-align: center; }

/*custom check box*/
/* Base for label styling */
[type="checkbox"]:not(:checked),
[type="checkbox"]:checked {
  position: absolute;
  left: -9999px; }

[type="checkbox"]:not(:checked) + label,
[type="checkbox"]:checked + label {
  position: relative;
  padding-left: 35px;
  cursor: pointer;
  padding-top: 5px; }

/* checkbox aspect */
[type="checkbox"]:not(:checked) + label:before,
[type="checkbox"]:checked + label:before {
  content: '';
  position: absolute;
  left: 0;
  top: 0;
  width: 24px;
  height: 24px;
  border: 2px solid #ccc;
  background: #fff;
  border-radius: 4px;
  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1); }

/* checked mark aspect */
[type="checkbox"]:not(:checked) + label:after,
[type="checkbox"]:checked + label:after {
  content: 'âœ”';
  position: absolute;
  top: .1em;
  left: .3rem;
  font-size: 2.5rem;
  line-height: 0.8;
  color: #1197d5;
  transition: all .2s; }

/* checked mark aspect changes */
[type="checkbox"]:not(:checked) + label:after {
  opacity: 0;
  transform: scale(0); }

[type="checkbox"]:checked + label:after {
  opacity: 1;
  transform: scale(1); }

/* accessibility */
[type="checkbox"]:checked:focus + label:before,
[type="checkbox"]:not(:checked):focus + label:before {
  border: 2px dotted blue; }

/* hover style just for information */
label:hover:before {
  border: 2px solid #4778d9 !important; }

/*end custom checkbox*/
/*end form buttons and fields*/
/*dashboard page*/
.marge-left {
  margin-left: 1rem; }

p.bloc-information {
  margin-top: 2.5rem;
  margin-bottom: 2.5rem; }
  p.bloc-information:last-child() {
    margin-bottom: 0; }
  p.bloc-information span {
    line-height: 1; }
  p.bloc-information span:nth-child(1) {
    font-size: 2.5rem; }
  p.bloc-information span:nth-child(2) {
    font-family: 'robotobold', sans-serif;
    font-style: normal;
    font-weight: normal;
    font-size: 2.5rem;
    color: #1197d5; }

/*end dashboard page*/

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
